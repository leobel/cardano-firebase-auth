# Learn detailed information about the fields of an extension.yaml file in the docs:
# https://firebase.google.com/docs/extensions/reference/extension-yaml

# Identifier for your extension
name: tangocrypto-auth  
version: 0.0.1  # Follow semver versioning
specVersion: v1beta  # Version of the Firebase Extensions specification

# Friendly display name for your extension (~3-5 words)
displayName: Cardano Wallet Authentication

# Brief description of the task your extension performs (~1 sentence)
description: >-
  Cardano wallet authentication using asymmetric cryptography.

license: Apache-2.0  # https://spdx.org/licenses/

author:
  authorName: Leobel Izquierdo
  url: https://github.com/leobel

# Public URL for the source code of your extension.
sourceUrl: https://github.com/leobel/cardano-firebase-auth

# Specify whether a paid-tier billing plan is required to use your extension.
# Learn more in the docs: https://firebase.google.com/docs/extensions/reference/extension-yaml#billing-required-field
billingRequired: true

# In an `apis` field, list any Google APIs (like Cloud Translation, BigQuery, etc.)
# required for your extension to operate.
# Learn more in the docs:
# https://firebase.google.com/docs/extensions/reference/extension-yaml#apis-field
apis:
  - apiName: iam.googleapis.com
    reason: To sign custom authentication token
  - apiName: iamcredentials.googleapis.com
    reason: To sign custom authentication token
  - apiName: stackdriver.googleapis.com
    reason: Monitoring
  - apiName: monitoring.googleapis.com
    reason: Monitoring
  - apiName: logging.googleapis.com
    reason: Monitoring
  - apiName: secretmanager.googleapis.com
    reason: Securely storing and reading OAuth 2.0 client secret

# In a `roles` field, list any IAM access roles required for your extension to operate.
# Learn more in the docs:
# https://firebase.google.com/docs/extensions/reference/extension-yaml#roles-field

# In the `resources` field, list each of your extension's functions, including the trigger for each function.
# Learn more in the docs:
# https://firebase.google.com/docs/extensions/reference/extension-yaml#resources-field
resources:
  - name: greetTheWorld
    type: firebaseextensions.v1beta.function
    description: >-
      HTTP request-triggered function that responds with a specified greeting message
    properties:
      # httpsTrigger is used for an HTTP triggered function.
      httpsTrigger: {}
      runtime: "nodejs16"

  - name: requestMessage
    type: firebaseextensions.v1beta.function
    description: This function creates a message to sign by a user.
    properties:
      # httpsTrigger is used for an HTTP triggered function.
      httpsTrigger: {}
      runtime: "nodejs16"
      
  - name: issueToken
    type: firebaseextensions.v1beta.function
    description: This function validates a signed message by a user. If the message is correctly signed, then the function issues a custom token.
    properties:
      httpsTrigger: {}
      runtime: "nodejs16"      

# In the `params` field, set up your extension's user-configured parameters.
# Learn more in the docs:
# https://firebase.google.com/docs/extensions/reference/extension-yaml#params-field
params:
  - param: GREETING
    label: Greeting for the world
    description: >-
      What do you want to say to the world?
      For example, Hello world? or What's up, world?
    type: string
    default: Hello
    required: true
    immutable: false

  - param: WEBSITE_URI
    label: Website URI
    description: >-
      The final website URI. It should contain a folder if present.
      For testing purposes, you may enter: http://localhost, but we recommend to enter a URI where you will release your app.
      This URI will be used in the authentication flow.
    type: string
    example: https://website.com/my-app
    required: true
    immutable: false

  - param: SERVICE_ACCOUNT_PROJECT_ID
    label: Project Id of Service Account
    description: >-
      The project id of the service account. To extract this value from the service account certificate
      you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/
    type: string
    example: example-id
    required: true
    immutable: false

  - param: SERVICE_ACCOUNT_EMAIL
    label: E-mail of Service Account
    description: >-
      The e-mail of the service account. To extract this value from the service account certificate
      you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/
    type: string
    example: firebase-adminsdk-lxrdi@example-id.iam.gserviceaccount.com
    validationRegex: ^([a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*@[a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*\.[a-zA-Z]{2,7})$
    validationErrorMessage: >-
      The e-mail provided has invalid format.
    required: true
    immutable: false

  - param: SERVICE_ACCOUNT_PRIVATE_KEY
    label: Private Key of Service Account
    description: >-
      The private key of the service account. To extract this value from the service account certificate
      you can use our converter: https://moralisweb3.github.io/firebase-extensions/service-account-converter/
    type: secret
    example: https://website.com/my-app
    validationRegex: ^\S+$
    validationErrorMessage: >-
      The private key provided has invalid format.
    required: true
    immutable: false